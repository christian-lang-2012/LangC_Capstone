//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Christian\LangC_Capstone\LangC_HolderFolder\LangC_SourceCode\LangC_Capstone\Grammars\ALGrammar.g4 by ANTLR 4.1-SNAPSHOT
namespace LangC_Capstone.Grammars {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.1-SNAPSHOT")]
public partial class ALGrammarParser : Parser {
	public const int
		T__15=1, T__14=2, T__13=3, T__12=4, T__11=5, T__10=6, T__9=7, T__8=8, 
		T__7=9, T__6=10, T__5=11, T__4=12, T__3=13, T__2=14, T__1=15, T__0=16, 
		ProgramHeader=17, VariableHeader=18, MethodHeader=19, AND=20, ARRAY=21, 
		AS=22, BEGIN=23, BREAK=24, CASE=25, CATCH=26, CONSTANTLY=27, CONTINUE=28, 
		DO=29, ELSE=30, END=31, EXIT=32, FILE=33, FINALLY=34, FOR=35, FUNCTION=36, 
		IF=37, IN=38, IS=39, LET=40, OR=41, PROGRAM=42, SET=43, SWITCH=44, THIS=45, 
		TRY=46, UNIMPLEMENTED=47, WHILE=48, IntegerLiteral=49, FloatingPointLiteral=50, 
		BooleanLiteral=51, CharacterLiteral=52, StringLiteral=53, NullLiteral=54, 
		LPAREN=55, RPAREN=56, LBRACK=57, RBRACK=58, SEMI=59, COMMA=60, DOT=61, 
		ASSIGN=62, GT=63, LT=64, BANG=65, TILDE=66, QUESTION=67, COLON=68, EQUAL=69, 
		LE=70, GE=71, NOTEQUAL=72, INC=73, DEC=74, ADD=75, SUB=76, MUL=77, DIV=78, 
		BITAND=79, BITOR=80, CARET=81, MOD=82, QUOTE=83, ADD_ASSIGN=84, SUB_ASSIGN=85, 
		MUL_ASSIGN=86, DIV_ASSIGN=87, AND_ASSIGN=88, OR_ASSIGN=89, XOR_ASSIGN=90, 
		MOD_ASSIGN=91, LSHIFT_ASSIGN=92, RSHIFT_ASSIGN=93, URSHIFT_ASSIGN=94, 
		Identifier=95, VariableIdentifier=96, AL_Letter=97, AL_LetterOrDigit=98, 
		WS=99, COMMENT=100, LINE_COMMENT=101;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'double'", "'}'", "'boolean'", "'float'", "'char'", "'long'", 
		"'short'", "'default'", "'int'", "'void'", "'{'", "':end program:'", "'byte'", 
		"'return'", "'&&'", "':start program:'", "':alproject:'", "':variables:'", 
		"':methods:'", "'and'", "'array'", "'as'", "'begin'", "'break'", "'case'", 
		"'catch'", "'constantly'", "'continue'", "'do'", "'else'", "'end'", "'exit'", 
		"'file'", "'finally'", "'for'", "'function'", "'if'", "'in'", "'is'", 
		"'let'", "'||'", "'program'", "'set'", "'switch'", "'this'", "'try'", 
		"'unimplemented'", "'while'", "IntegerLiteral", "FloatingPointLiteral", 
		"BooleanLiteral", "CharacterLiteral", "StringLiteral", "'null'", "'('", 
		"')'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
		"'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'\"'", "'+='", "'-='", 
		"'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", 
		"Identifier", "VariableIdentifier", "AL_Letter", "AL_LetterOrDigit", "WS", 
		"COMMENT", "LINE_COMMENT"
	};
	public const int
		RULE_program = 0, RULE_programDeclaration = 1, RULE_mainProgram = 2, RULE_methodDeclaration = 3, 
		RULE_methodBody = 4, RULE_block = 5, RULE_blockStatement = 6, RULE_statement = 7, 
		RULE_switchBlockStatementGroup = 8, RULE_switchLabel = 9, RULE_forControl = 10, 
		RULE_forInit = 11, RULE_enhancedForControl = 12, RULE_forUpdate = 13, 
		RULE_parExpression = 14, RULE_expressionList = 15, RULE_statementExpression = 16, 
		RULE_constantExpression = 17, RULE_formalParameters = 18, RULE_formalParameterList = 19, 
		RULE_formalParameter = 20, RULE_variableDeclarators = 21, RULE_variableDeclaration = 22, 
		RULE_variableDeclarationID = 23, RULE_variableInitialization = 24, RULE_expression = 25, 
		RULE_primary = 26, RULE_literal = 27, RULE_type = 28, RULE_primitiveType = 29;
	public static readonly string[] ruleNames = {
		"program", "programDeclaration", "mainProgram", "methodDeclaration", "methodBody", 
		"block", "blockStatement", "statement", "switchBlockStatementGroup", "switchLabel", 
		"forControl", "forInit", "enhancedForControl", "forUpdate", "parExpression", 
		"expressionList", "statementExpression", "constantExpression", "formalParameters", 
		"formalParameterList", "formalParameter", "variableDeclarators", "variableDeclaration", 
		"variableDeclarationID", "variableInitialization", "expression", "primary", 
		"literal", "type", "primitiveType"
	};

	public override string GrammarFileName { get { return "ALGrammar.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }


		protected const int EOF = Eof;

	public ALGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramDeclarationContext programDeclaration() {
			return GetRuleContext<ProgramDeclarationContext>(0);
		}
		public ITerminalNode ProgramHeader() { return GetToken(ALGrammarParser.ProgramHeader, 0); }
		public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public ITerminalNode MethodHeader() { return GetToken(ALGrammarParser.MethodHeader, 0); }
		public ITerminalNode VariableHeader() { return GetToken(ALGrammarParser.VariableHeader, 0); }
		public IReadOnlyList<MethodDeclarationContext> methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		public MainProgramContext mainProgram() {
			return GetRuleContext<MainProgramContext>(0);
		}
		public IReadOnlyList<VariableDeclarationContext> variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_program; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_la = _input.La(1);
			if (_la==ProgramHeader) {
				{
				State = 60; Match(ProgramHeader);
				}
			}

			State = 63; programDeclaration();
			State = 65;
			_la = _input.La(1);
			if (_la==VariableHeader) {
				{
				State = 64; Match(VariableHeader);
				}
			}

			State = 70;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LET) {
				{
				{
				State = 67; variableDeclaration();
				}
				}
				State = 72;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 74;
			_la = _input.La(1);
			if (_la==MethodHeader) {
				{
				State = 73; Match(MethodHeader);
				}
			}

			State = 79;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FUNCTION) {
				{
				{
				State = 76; methodDeclaration();
				}
				}
				State = 81;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 83;
			_la = _input.La(1);
			if (_la==16) {
				{
				State = 82; mainProgram();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDeclarationContext : ParserRuleContext {
		public ITerminalNode QUOTE(int i) {
			return GetToken(ALGrammarParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(ALGrammarParser.QUOTE); }
		public ITerminalNode Identifier() { return GetToken(ALGrammarParser.Identifier, 0); }
		public ITerminalNode PROGRAM() { return GetToken(ALGrammarParser.PROGRAM, 0); }
		public ITerminalNode THIS() { return GetToken(ALGrammarParser.THIS, 0); }
		public ProgramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_programDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterProgramDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitProgramDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDeclarationContext programDeclaration() {
		ProgramDeclarationContext _localctx = new ProgramDeclarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_programDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(THIS);
			State = 86; Match(PROGRAM);
			State = 87; Match(QUOTE);
			State = 88; Match(Identifier);
			State = 89; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainProgramContext : ParserRuleContext {
		public IReadOnlyList<BlockStatementContext> blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public MainProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_mainProgram; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterMainProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitMainProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainProgramContext mainProgram() {
		MainProgramContext _localctx = new MainProgramContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_mainProgram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(16);
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 14) | (1L << BEGIN) | (1L << BREAK) | (1L << CONTINUE) | (1L << DO) | (1L << FOR) | (1L << IF) | (1L << LET) | (1L << SWITCH) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << SEMI))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (Identifier - 65)) | (1L << (VariableIdentifier - 65)))) != 0)) {
				{
				{
				State = 92; blockStatement();
				}
				}
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 98; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(ALGrammarParser.FUNCTION, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ALGrammarParser.Identifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_methodDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_methodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(FUNCTION);
			State = 103;
			switch (_input.La(1)) {
			case 1:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 9:
			case 13:
				{
				State = 101; type();
				}
				break;
			case 10:
				{
				State = 102; Match(10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 105; Match(Identifier);
			State = 106; formalParameters();
			State = 109;
			switch (_input.La(1)) {
			case BEGIN:
				{
				State = 107; methodBody();
				}
				break;
			case SEMI:
				{
				State = 108; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_methodBody; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; block();
			State = 112; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public IReadOnlyList<BlockStatementContext> blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public ITerminalNode BEGIN() { return GetToken(ALGrammarParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(ALGrammarParser.END, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_block; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(BEGIN);
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 14) | (1L << BEGIN) | (1L << BREAK) | (1L << CONTINUE) | (1L << DO) | (1L << FOR) | (1L << IF) | (1L << LET) | (1L << SWITCH) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << SEMI))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (Identifier - 65)) | (1L << (VariableIdentifier - 65)))) != 0)) {
				{
				{
				State = 115; blockStatement();
				}
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 121; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_blockStatement);
		try {
			State = 127;
			switch (_input.La(1)) {
			case LET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; variableDeclaration();
				State = 124; Match(SEMI);
				}
				break;
			case 14:
			case BEGIN:
			case BREAK:
			case CONTINUE:
			case DO:
			case FOR:
			case IF:
			case SWITCH:
			case WHILE:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case SEMI:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case VariableIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public ITerminalNode VariableIdentifier() { return GetToken(ALGrammarParser.VariableIdentifier, 0); }
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public IReadOnlyList<SwitchLabelContext> switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IReadOnlyList<SwitchBlockStatementGroupContext> switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 192;
			switch (_input.La(1)) {
			case BEGIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130; Match(IF);
				State = 131; parExpression();
				State = 132; statement();
				State = 135;
				switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					State = 133; Match(ELSE);
					State = 134; statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 137; Match(FOR);
				State = 138; Match(LPAREN);
				State = 139; forControl();
				State = 140; Match(RPAREN);
				State = 141; statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 143; Match(WHILE);
				State = 144; parExpression();
				State = 145; statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 5);
				{
				State = 147; Match(DO);
				State = 148; statement();
				State = 149; Match(WHILE);
				State = 150; parExpression();
				State = 151; Match(SEMI);
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 6);
				{
				State = 153; Match(SWITCH);
				State = 154; parExpression();
				State = 155; Match(11);
				State = 159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						State = 156; switchBlockStatementGroup();
						}
						} 
					}
					State = 161;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				}
				State = 165;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==8 || _la==CASE) {
					{
					{
					State = 162; switchLabel();
					}
					}
					State = 167;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 168; Match(2);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 7);
				{
				State = 170; Match(14);
				State = 172;
				_la = _input.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (IntegerLiteral - 49)) | (1L << (FloatingPointLiteral - 49)) | (1L << (BooleanLiteral - 49)) | (1L << (CharacterLiteral - 49)) | (1L << (StringLiteral - 49)) | (1L << (NullLiteral - 49)) | (1L << (LPAREN - 49)) | (1L << (BANG - 49)) | (1L << (TILDE - 49)) | (1L << (INC - 49)) | (1L << (DEC - 49)) | (1L << (ADD - 49)) | (1L << (SUB - 49)) | (1L << (Identifier - 49)))) != 0)) {
					{
					State = 171; expression(0);
					}
				}

				State = 174; Match(SEMI);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 8);
				{
				State = 175; Match(BREAK);
				State = 177;
				_la = _input.La(1);
				if (_la==VariableIdentifier) {
					{
					State = 176; Match(VariableIdentifier);
					}
				}

				State = 179; Match(SEMI);
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 180; Match(CONTINUE);
				State = 182;
				_la = _input.La(1);
				if (_la==VariableIdentifier) {
					{
					State = 181; Match(VariableIdentifier);
					}
				}

				State = 184; Match(SEMI);
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 10);
				{
				State = 185; Match(SEMI);
				}
				break;
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 11);
				{
				State = 186; statementExpression();
				State = 187; Match(SEMI);
				}
				break;
			case VariableIdentifier:
				EnterOuterAlt(_localctx, 12);
				{
				State = 189; Match(VariableIdentifier);
				State = 190; Match(COLON);
				State = 191; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public IReadOnlyList<BlockStatementContext> blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public IReadOnlyList<SwitchLabelContext> switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_switchBlockStatementGroup; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 194; switchLabel();
				}
				}
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==8 || _la==CASE );
			State = 200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 199; blockStatement();
				}
				}
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 14) | (1L << BEGIN) | (1L << BREAK) | (1L << CONTINUE) | (1L << DO) | (1L << FOR) | (1L << IF) | (1L << LET) | (1L << SWITCH) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << SEMI))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (Identifier - 65)) | (1L << (VariableIdentifier - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_switchLabel; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_switchLabel);
		try {
			State = 210;
			switch (_input.La(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; Match(CASE);
				State = 205; constantExpression();
				State = 206; Match(COLON);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208; Match(8);
				State = 209; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_forControl; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_forControl);
		int _la;
		try {
			State = 224;
			switch (_input.La(1)) {
			case 1:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 9:
			case 13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; enhancedForControl();
				}
				break;
			case LET:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case SEMI:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				_la = _input.La(1);
				if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (LET - 40)) | (1L << (IntegerLiteral - 40)) | (1L << (FloatingPointLiteral - 40)) | (1L << (BooleanLiteral - 40)) | (1L << (CharacterLiteral - 40)) | (1L << (StringLiteral - 40)) | (1L << (NullLiteral - 40)) | (1L << (LPAREN - 40)) | (1L << (BANG - 40)) | (1L << (TILDE - 40)) | (1L << (INC - 40)) | (1L << (DEC - 40)) | (1L << (ADD - 40)) | (1L << (SUB - 40)) | (1L << (Identifier - 40)))) != 0)) {
					{
					State = 213; forInit();
					}
				}

				State = 216; Match(SEMI);
				State = 218;
				_la = _input.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (IntegerLiteral - 49)) | (1L << (FloatingPointLiteral - 49)) | (1L << (BooleanLiteral - 49)) | (1L << (CharacterLiteral - 49)) | (1L << (StringLiteral - 49)) | (1L << (NullLiteral - 49)) | (1L << (LPAREN - 49)) | (1L << (BANG - 49)) | (1L << (TILDE - 49)) | (1L << (INC - 49)) | (1L << (DEC - 49)) | (1L << (ADD - 49)) | (1L << (SUB - 49)) | (1L << (Identifier - 49)))) != 0)) {
					{
					State = 217; expression(0);
					}
				}

				State = 220; Match(SEMI);
				State = 222;
				_la = _input.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (IntegerLiteral - 49)) | (1L << (FloatingPointLiteral - 49)) | (1L << (BooleanLiteral - 49)) | (1L << (CharacterLiteral - 49)) | (1L << (StringLiteral - 49)) | (1L << (NullLiteral - 49)) | (1L << (LPAREN - 49)) | (1L << (BANG - 49)) | (1L << (TILDE - 49)) | (1L << (INC - 49)) | (1L << (DEC - 49)) | (1L << (ADD - 49)) | (1L << (SUB - 49)) | (1L << (Identifier - 49)))) != 0)) {
					{
					State = 221; forUpdate();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_forInit; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_forInit);
		try {
			State = 228;
			switch (_input.La(1)) {
			case LET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226; variableDeclaration();
				}
				break;
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		public ITerminalNode VariableIdentifier() { return GetToken(ALGrammarParser.VariableIdentifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_enhancedForControl; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_enhancedForControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; type();
			State = 231; Match(VariableIdentifier);
			State = 232; Match(COLON);
			State = 233; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_forUpdate; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(LPAREN);
			State = 238; expression(0);
			State = 239; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expressionList; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; expression(0);
			State = 246;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 242; Match(COMMA);
				State = 243; expression(0);
				}
				}
				State = 248;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statementExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constantExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameters; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(LPAREN);
			State = 255;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 9) | (1L << 13))) != 0)) {
				{
				State = 254; formalParameterList();
				}
			}

			State = 257; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; formalParameter();
			State = 264;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 260; Match(COMMA);
				State = 261; formalParameter();
				}
				}
				State = 266;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public ITerminalNode VariableIdentifier() { return GetToken(ALGrammarParser.VariableIdentifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; type();
			State = 268; Match(VariableIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public IReadOnlyList<VariableDeclarationContext> variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclarators; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; variableDeclaration();
			State = 275;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 271; Match(COMMA);
				State = 272; variableDeclaration();
				}
				}
				State = 277;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public VariableDeclarationIDContext variableDeclarationID() {
			return GetRuleContext<VariableDeclarationIDContext>(0);
		}
		public ITerminalNode LET() { return GetToken(ALGrammarParser.LET, 0); }
		public VariableInitializationContext variableInitialization() {
			return GetRuleContext<VariableInitializationContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(LET);
			State = 279; type();
			State = 280; variableDeclarationID();
			State = 283;
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 281; Match(ASSIGN);
				State = 282; variableInitialization();
				}
			}

			State = 285; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationIDContext : ParserRuleContext {
		public ITerminalNode VariableIdentifier() { return GetToken(ALGrammarParser.VariableIdentifier, 0); }
		public VariableDeclarationIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclarationID; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationIDContext variableDeclarationID() {
		VariableDeclarationIDContext _localctx = new VariableDeclarationIDContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_variableDeclarationID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(VariableIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializationContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableInitialization; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterVariableInitialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitVariableInitialization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializationContext variableInitialization() {
		VariableInitializationContext _localctx = new VariableInitializationContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_variableInitialization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode VariableIdentifier() { return GetToken(ALGrammarParser.VariableIdentifier, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ALGrammarParser.Identifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 292; Match(LPAREN);
				State = 293; type();
				State = 294; Match(RPAREN);
				State = 295; expression(16);
				}
				break;

			case 2:
				{
				State = 297;
				_la = _input.La(1);
				if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INC - 73)) | (1L << (DEC - 73)) | (1L << (ADD - 73)) | (1L << (SUB - 73)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 298; expression(14);
				}
				break;

			case 3:
				{
				State = 299;
				_la = _input.La(1);
				if ( !(_la==BANG || _la==TILDE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 300; expression(13);
				}
				break;

			case 4:
				{
				State = 301; primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 382;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 380;
					switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 304;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 305;
						_la = _input.La(1);
						if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (MUL - 77)) | (1L << (DIV - 77)) | (1L << (MOD - 77)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 306; expression(13);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 307;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 308;
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 309; expression(12);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 310;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 318;
						switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
						case 1:
							{
							State = 311; Match(LT);
							State = 312; Match(LT);
							}
							break;

						case 2:
							{
							State = 313; Match(GT);
							State = 314; Match(GT);
							State = 315; Match(GT);
							}
							break;

						case 3:
							{
							State = 316; Match(GT);
							State = 317; Match(GT);
							}
							break;
						}
						State = 320; expression(11);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 321;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 322;
						_la = _input.La(1);
						if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (GT - 63)) | (1L << (LT - 63)) | (1L << (LE - 63)) | (1L << (GE - 63)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 323; expression(10);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 324;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 325;
						_la = _input.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 326; expression(9);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 327;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 328; Match(BITAND);
						State = 329; expression(8);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 330;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 331; Match(CARET);
						State = 332; expression(7);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 333;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 334; Match(BITOR);
						State = 335; expression(6);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 336;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 337; Match(15);
						State = 338; expression(5);
						}
						break;

					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 339;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 340; Match(OR);
						State = 341; expression(4);
						}
						break;

					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 342;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 355;
						switch (_input.La(1)) {
						case ASSIGN:
							{
							State = 343; Match(ASSIGN);
							}
							break;
						case ADD_ASSIGN:
							{
							State = 344; Match(ADD_ASSIGN);
							}
							break;
						case SUB_ASSIGN:
							{
							State = 345; Match(SUB_ASSIGN);
							}
							break;
						case MUL_ASSIGN:
							{
							State = 346; Match(MUL_ASSIGN);
							}
							break;
						case DIV_ASSIGN:
							{
							State = 347; Match(DIV_ASSIGN);
							}
							break;
						case AND_ASSIGN:
							{
							State = 348; Match(AND_ASSIGN);
							}
							break;
						case OR_ASSIGN:
							{
							State = 349; Match(OR_ASSIGN);
							}
							break;
						case XOR_ASSIGN:
							{
							State = 350; Match(XOR_ASSIGN);
							}
							break;
						case RSHIFT_ASSIGN:
							{
							State = 351; Match(RSHIFT_ASSIGN);
							}
							break;
						case URSHIFT_ASSIGN:
							{
							State = 352; Match(URSHIFT_ASSIGN);
							}
							break;
						case LSHIFT_ASSIGN:
							{
							State = 353; Match(LSHIFT_ASSIGN);
							}
							break;
						case MOD_ASSIGN:
							{
							State = 354; Match(MOD_ASSIGN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 357; expression(1);
						}
						break;

					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 358;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 359; Match(QUESTION);
						State = 360; expression(0);
						State = 361; Match(COLON);
						State = 362; expression(3);
						}
						break;

					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 364;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 365; Match(DOT);
						State = 366;
						_la = _input.La(1);
						if ( !(_la==Identifier || _la==VariableIdentifier) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						}
						break;

					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 367;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 368; Match(LBRACK);
						State = 369; expression(0);
						State = 370; Match(RBRACK);
						}
						break;

					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 372;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 373; Match(LPAREN);
						State = 375;
						_la = _input.La(1);
						if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (IntegerLiteral - 49)) | (1L << (FloatingPointLiteral - 49)) | (1L << (BooleanLiteral - 49)) | (1L << (CharacterLiteral - 49)) | (1L << (StringLiteral - 49)) | (1L << (NullLiteral - 49)) | (1L << (LPAREN - 49)) | (1L << (BANG - 49)) | (1L << (TILDE - 49)) | (1L << (INC - 49)) | (1L << (DEC - 49)) | (1L << (ADD - 49)) | (1L << (SUB - 49)) | (1L << (Identifier - 49)))) != 0)) {
							{
							State = 374; expressionList();
							}
						}

						State = 377; Match(RPAREN);
						}
						break;

					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 378;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 379;
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						}
						break;
					}
					} 
				}
				State = 384;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ALGrammarParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primary; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_primary);
		try {
			State = 391;
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385; Match(LPAREN);
				State = 386; expression(0);
				State = 387; Match(RPAREN);
				}
				break;
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389; literal();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 390; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NullLiteral() { return GetToken(ALGrammarParser.NullLiteral, 0); }
		public ITerminalNode CharacterLiteral() { return GetToken(ALGrammarParser.CharacterLiteral, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(ALGrammarParser.IntegerLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(ALGrammarParser.StringLiteral, 0); }
		public ITerminalNode FloatingPointLiteral() { return GetToken(ALGrammarParser.FloatingPointLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(ALGrammarParser.BooleanLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; primitiveType();
			State = 400;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 396; Match(LBRACK);
				State = 397; Match(RBRACK);
				}
				}
				State = 402;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
		public override void EnterRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALGrammarListener typedListener = listener as IALGrammarListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALGrammarVisitor<TResult> typedVisitor = visitor as IALGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 7) | (1L << 9) | (1L << 13))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 12);

		case 1: return Precpred(_ctx, 11);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 1);

		case 11: return Precpred(_ctx, 2);

		case 12: return Precpred(_ctx, 19);

		case 13: return Precpred(_ctx, 18);

		case 14: return Precpred(_ctx, 17);

		case 15: return Precpred(_ctx, 15);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xB6D5\x5D61\xF22C\xAD89\x44D2\xDF97\x846A\xE419\x3g\x198\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x5\x2"+
		"@\n\x2\x3\x2\x3\x2\x5\x2\x44\n\x2\x3\x2\a\x2G\n\x2\f\x2\xE\x2J\v\x2\x3"+
		"\x2\x5\x2M\n\x2\x3\x2\a\x2P\n\x2\f\x2\xE\x2S\v\x2\x3\x2\x5\x2V\n\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\a\x4`\n\x4\f\x4\xE\x4\x63"+
		"\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x5\x5j\n\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x5\x5p\n\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\a\aw\n\a\f\a\xE\az\v\a\x3\a\x3"+
		"\a\x3\b\x3\b\x3\b\x3\b\x5\b\x82\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t"+
		"\x8A\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\xA0\n\t\f\t\xE\t\xA3\v\t\x3"+
		"\t\a\t\xA6\n\t\f\t\xE\t\xA9\v\t\x3\t\x3\t\x3\t\x3\t\x5\t\xAF\n\t\x3\t"+
		"\x3\t\x3\t\x5\t\xB4\n\t\x3\t\x3\t\x3\t\x5\t\xB9\n\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x5\t\xC3\n\t\x3\n\x6\n\xC6\n\n\r\n\xE\n\xC7\x3"+
		"\n\x6\n\xCB\n\n\r\n\xE\n\xCC\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xD5\n"+
		"\v\x3\f\x3\f\x5\f\xD9\n\f\x3\f\x3\f\x5\f\xDD\n\f\x3\f\x3\f\x5\f\xE1\n"+
		"\f\x5\f\xE3\n\f\x3\r\x3\r\x5\r\xE7\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\a\x11\xF7\n"+
		"\x11\f\x11\xE\x11\xFA\v\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x5\x14\x102\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15\x109\n\x15"+
		"\f\x15\xE\x15\x10C\v\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\a\x17"+
		"\x114\n\x17\f\x17\xE\x17\x117\v\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x5\x18\x11E\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x131\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x141\n\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x166\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x17A\n\x1B\x3\x1B\x3\x1B\x3\x1B\a"+
		"\x1B\x17F\n\x1B\f\x1B\xE\x1B\x182\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x5\x1C\x18A\n\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E"+
		"\x191\n\x1E\f\x1E\xE\x1E\x194\v\x1E\x3\x1F\x3\x1F\x3\x1F\x2\x2\x3\x34"+
		" \x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2\x2\f\x3\x2KN\x3\x2\x43\x44\x4\x2OPTT\x3"+
		"\x2MN\x4\x2\x41\x42HI\x4\x2GGJJ\x3\x2\x61\x62\x3\x2KL\x3\x2\x33\x38\x6"+
		"\x2\x3\x3\x5\t\v\v\xF\xF\x1C6\x2?\x3\x2\x2\x2\x4W\x3\x2\x2\x2\x6]\x3\x2"+
		"\x2\x2\b\x66\x3\x2\x2\x2\nq\x3\x2\x2\x2\ft\x3\x2\x2\x2\xE\x81\x3\x2\x2"+
		"\x2\x10\xC2\x3\x2\x2\x2\x12\xC5\x3\x2\x2\x2\x14\xD4\x3\x2\x2\x2\x16\xE2"+
		"\x3\x2\x2\x2\x18\xE6\x3\x2\x2\x2\x1A\xE8\x3\x2\x2\x2\x1C\xED\x3\x2\x2"+
		"\x2\x1E\xEF\x3\x2\x2\x2 \xF3\x3\x2\x2\x2\"\xFB\x3\x2\x2\x2$\xFD\x3\x2"+
		"\x2\x2&\xFF\x3\x2\x2\x2(\x105\x3\x2\x2\x2*\x10D\x3\x2\x2\x2,\x110\x3\x2"+
		"\x2\x2.\x118\x3\x2\x2\x2\x30\x121\x3\x2\x2\x2\x32\x123\x3\x2\x2\x2\x34"+
		"\x130\x3\x2\x2\x2\x36\x189\x3\x2\x2\x2\x38\x18B\x3\x2\x2\x2:\x18D\x3\x2"+
		"\x2\x2<\x195\x3\x2\x2\x2>@\a\x13\x2\x2?>\x3\x2\x2\x2?@\x3\x2\x2\x2@\x41"+
		"\x3\x2\x2\x2\x41\x43\x5\x4\x3\x2\x42\x44\a\x14\x2\x2\x43\x42\x3\x2\x2"+
		"\x2\x43\x44\x3\x2\x2\x2\x44H\x3\x2\x2\x2\x45G\x5.\x18\x2\x46\x45\x3\x2"+
		"\x2\x2GJ\x3\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IL\x3\x2\x2\x2JH\x3"+
		"\x2\x2\x2KM\a\x15\x2\x2LK\x3\x2\x2\x2LM\x3\x2\x2\x2MQ\x3\x2\x2\x2NP\x5"+
		"\b\x5\x2ON\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2RU\x3"+
		"\x2\x2\x2SQ\x3\x2\x2\x2TV\x5\x6\x4\x2UT\x3\x2\x2\x2UV\x3\x2\x2\x2V\x3"+
		"\x3\x2\x2\x2WX\a/\x2\x2XY\a,\x2\x2YZ\aU\x2\x2Z[\a\x61\x2\x2[\\\aU\x2\x2"+
		"\\\x5\x3\x2\x2\x2]\x61\a\x12\x2\x2^`\x5\xE\b\x2_^\x3\x2\x2\x2`\x63\x3"+
		"\x2\x2\x2\x61_\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x64\x3\x2\x2\x2\x63"+
		"\x61\x3\x2\x2\x2\x64\x65\a\xE\x2\x2\x65\a\x3\x2\x2\x2\x66i\a&\x2\x2gj"+
		"\x5:\x1E\x2hj\a\f\x2\x2ig\x3\x2\x2\x2ih\x3\x2\x2\x2jk\x3\x2\x2\x2kl\a"+
		"\x61\x2\x2lo\x5&\x14\x2mp\x5\n\x6\x2np\a=\x2\x2om\x3\x2\x2\x2on\x3\x2"+
		"\x2\x2p\t\x3\x2\x2\x2qr\x5\f\a\x2rs\a=\x2\x2s\v\x3\x2\x2\x2tx\a\x19\x2"+
		"\x2uw\x5\xE\b\x2vu\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2"+
		"\x2y{\x3\x2\x2\x2zx\x3\x2\x2\x2{|\a!\x2\x2|\r\x3\x2\x2\x2}~\x5.\x18\x2"+
		"~\x7F\a=\x2\x2\x7F\x82\x3\x2\x2\x2\x80\x82\x5\x10\t\x2\x81}\x3\x2\x2\x2"+
		"\x81\x80\x3\x2\x2\x2\x82\xF\x3\x2\x2\x2\x83\xC3\x5\f\a\x2\x84\x85\a\'"+
		"\x2\x2\x85\x86\x5\x1E\x10\x2\x86\x89\x5\x10\t\x2\x87\x88\a \x2\x2\x88"+
		"\x8A\x5\x10\t\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\xC3\x3\x2"+
		"\x2\x2\x8B\x8C\a%\x2\x2\x8C\x8D\a\x39\x2\x2\x8D\x8E\x5\x16\f\x2\x8E\x8F"+
		"\a:\x2\x2\x8F\x90\x5\x10\t\x2\x90\xC3\x3\x2\x2\x2\x91\x92\a\x32\x2\x2"+
		"\x92\x93\x5\x1E\x10\x2\x93\x94\x5\x10\t\x2\x94\xC3\x3\x2\x2\x2\x95\x96"+
		"\a\x1F\x2\x2\x96\x97\x5\x10\t\x2\x97\x98\a\x32\x2\x2\x98\x99\x5\x1E\x10"+
		"\x2\x99\x9A\a=\x2\x2\x9A\xC3\x3\x2\x2\x2\x9B\x9C\a.\x2\x2\x9C\x9D\x5\x1E"+
		"\x10\x2\x9D\xA1\a\r\x2\x2\x9E\xA0\x5\x12\n\x2\x9F\x9E\x3\x2\x2\x2\xA0"+
		"\xA3\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA7\x3\x2"+
		"\x2\x2\xA3\xA1\x3\x2\x2\x2\xA4\xA6\x5\x14\v\x2\xA5\xA4\x3\x2\x2\x2\xA6"+
		"\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAA\x3\x2"+
		"\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAB\a\x4\x2\x2\xAB\xC3\x3\x2\x2\x2\xAC"+
		"\xAE\a\x10\x2\x2\xAD\xAF\x5\x34\x1B\x2\xAE\xAD\x3\x2\x2\x2\xAE\xAF\x3"+
		"\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xC3\a=\x2\x2\xB1\xB3\a\x1A\x2\x2\xB2"+
		"\xB4\a\x62\x2\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2"+
		"\x2\x2\xB5\xC3\a=\x2\x2\xB6\xB8\a\x1E\x2\x2\xB7\xB9\a\x62\x2\x2\xB8\xB7"+
		"\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xC3\a=\x2\x2"+
		"\xBB\xC3\a=\x2\x2\xBC\xBD\x5\"\x12\x2\xBD\xBE\a=\x2\x2\xBE\xC3\x3\x2\x2"+
		"\x2\xBF\xC0\a\x62\x2\x2\xC0\xC1\a\x46\x2\x2\xC1\xC3\x5\x10\t\x2\xC2\x83"+
		"\x3\x2\x2\x2\xC2\x84\x3\x2\x2\x2\xC2\x8B\x3\x2\x2\x2\xC2\x91\x3\x2\x2"+
		"\x2\xC2\x95\x3\x2\x2\x2\xC2\x9B\x3\x2\x2\x2\xC2\xAC\x3\x2\x2\x2\xC2\xB1"+
		"\x3\x2\x2\x2\xC2\xB6\x3\x2\x2\x2\xC2\xBB\x3\x2\x2\x2\xC2\xBC\x3\x2\x2"+
		"\x2\xC2\xBF\x3\x2\x2\x2\xC3\x11\x3\x2\x2\x2\xC4\xC6\x5\x14\v\x2\xC5\xC4"+
		"\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2"+
		"\x2\xC8\xCA\x3\x2\x2\x2\xC9\xCB\x5\xE\b\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCC"+
		"\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\x13\x3\x2\x2"+
		"\x2\xCE\xCF\a\x1B\x2\x2\xCF\xD0\x5$\x13\x2\xD0\xD1\a\x46\x2\x2\xD1\xD5"+
		"\x3\x2\x2\x2\xD2\xD3\a\n\x2\x2\xD3\xD5\a\x46\x2\x2\xD4\xCE\x3\x2\x2\x2"+
		"\xD4\xD2\x3\x2\x2\x2\xD5\x15\x3\x2\x2\x2\xD6\xE3\x5\x1A\xE\x2\xD7\xD9"+
		"\x5\x18\r\x2\xD8\xD7\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDA\x3\x2\x2"+
		"\x2\xDA\xDC\a=\x2\x2\xDB\xDD\x5\x34\x1B\x2\xDC\xDB\x3\x2\x2\x2\xDC\xDD"+
		"\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xE0\a=\x2\x2\xDF\xE1\x5\x1C\xF\x2"+
		"\xE0\xDF\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE3\x3\x2\x2\x2\xE2\xD6\x3"+
		"\x2\x2\x2\xE2\xD8\x3\x2\x2\x2\xE3\x17\x3\x2\x2\x2\xE4\xE7\x5.\x18\x2\xE5"+
		"\xE7\x5 \x11\x2\xE6\xE4\x3\x2\x2\x2\xE6\xE5\x3\x2\x2\x2\xE7\x19\x3\x2"+
		"\x2\x2\xE8\xE9\x5:\x1E\x2\xE9\xEA\a\x62\x2\x2\xEA\xEB\a\x46\x2\x2\xEB"+
		"\xEC\x5\x34\x1B\x2\xEC\x1B\x3\x2\x2\x2\xED\xEE\x5 \x11\x2\xEE\x1D\x3\x2"+
		"\x2\x2\xEF\xF0\a\x39\x2\x2\xF0\xF1\x5\x34\x1B\x2\xF1\xF2\a:\x2\x2\xF2"+
		"\x1F\x3\x2\x2\x2\xF3\xF8\x5\x34\x1B\x2\xF4\xF5\a>\x2\x2\xF5\xF7\x5\x34"+
		"\x1B\x2\xF6\xF4\x3\x2\x2\x2\xF7\xFA\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF8"+
		"\xF9\x3\x2\x2\x2\xF9!\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFB\xFC\x5\x34\x1B"+
		"\x2\xFC#\x3\x2\x2\x2\xFD\xFE\x5\x34\x1B\x2\xFE%\x3\x2\x2\x2\xFF\x101\a"+
		"\x39\x2\x2\x100\x102\x5(\x15\x2\x101\x100\x3\x2\x2\x2\x101\x102\x3\x2"+
		"\x2\x2\x102\x103\x3\x2\x2\x2\x103\x104\a:\x2\x2\x104\'\x3\x2\x2\x2\x105"+
		"\x10A\x5*\x16\x2\x106\x107\a>\x2\x2\x107\x109\x5*\x16\x2\x108\x106\x3"+
		"\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2"+
		"\x2\x2\x10B)\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10E\x5:\x1E\x2\x10E"+
		"\x10F\a\x62\x2\x2\x10F+\x3\x2\x2\x2\x110\x115\x5.\x18\x2\x111\x112\a>"+
		"\x2\x2\x112\x114\x5.\x18\x2\x113\x111\x3\x2\x2\x2\x114\x117\x3\x2\x2\x2"+
		"\x115\x113\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116-\x3\x2\x2\x2\x117\x115"+
		"\x3\x2\x2\x2\x118\x119\a*\x2\x2\x119\x11A\x5:\x1E\x2\x11A\x11D\x5\x30"+
		"\x19\x2\x11B\x11C\a@\x2\x2\x11C\x11E\x5\x32\x1A\x2\x11D\x11B\x3\x2\x2"+
		"\x2\x11D\x11E\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x120\a=\x2\x2\x120"+
		"/\x3\x2\x2\x2\x121\x122\a\x62\x2\x2\x122\x31\x3\x2\x2\x2\x123\x124\x5"+
		"\x34\x1B\x2\x124\x33\x3\x2\x2\x2\x125\x126\b\x1B\x1\x2\x126\x127\a\x39"+
		"\x2\x2\x127\x128\x5:\x1E\x2\x128\x129\a:\x2\x2\x129\x12A\x5\x34\x1B\x12"+
		"\x12A\x131\x3\x2\x2\x2\x12B\x12C\t\x2\x2\x2\x12C\x131\x5\x34\x1B\x10\x12D"+
		"\x12E\t\x3\x2\x2\x12E\x131\x5\x34\x1B\xF\x12F\x131\x5\x36\x1C\x2\x130"+
		"\x125\x3\x2\x2\x2\x130\x12B\x3\x2\x2\x2\x130\x12D\x3\x2\x2\x2\x130\x12F"+
		"\x3\x2\x2\x2\x131\x180\x3\x2\x2\x2\x132\x133\f\xE\x2\x2\x133\x134\t\x4"+
		"\x2\x2\x134\x17F\x5\x34\x1B\xF\x135\x136\f\r\x2\x2\x136\x137\t\x5\x2\x2"+
		"\x137\x17F\x5\x34\x1B\xE\x138\x140\f\f\x2\x2\x139\x13A\a\x42\x2\x2\x13A"+
		"\x141\a\x42\x2\x2\x13B\x13C\a\x41\x2\x2\x13C\x13D\a\x41\x2\x2\x13D\x141"+
		"\a\x41\x2\x2\x13E\x13F\a\x41\x2\x2\x13F\x141\a\x41\x2\x2\x140\x139\x3"+
		"\x2\x2\x2\x140\x13B\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x141\x142\x3\x2"+
		"\x2\x2\x142\x17F\x5\x34\x1B\r\x143\x144\f\v\x2\x2\x144\x145\t\x6\x2\x2"+
		"\x145\x17F\x5\x34\x1B\f\x146\x147\f\n\x2\x2\x147\x148\t\a\x2\x2\x148\x17F"+
		"\x5\x34\x1B\v\x149\x14A\f\t\x2\x2\x14A\x14B\aQ\x2\x2\x14B\x17F\x5\x34"+
		"\x1B\n\x14C\x14D\f\b\x2\x2\x14D\x14E\aS\x2\x2\x14E\x17F\x5\x34\x1B\t\x14F"+
		"\x150\f\a\x2\x2\x150\x151\aR\x2\x2\x151\x17F\x5\x34\x1B\b\x152\x153\f"+
		"\x6\x2\x2\x153\x154\a\x11\x2\x2\x154\x17F\x5\x34\x1B\a\x155\x156\f\x5"+
		"\x2\x2\x156\x157\a+\x2\x2\x157\x17F\x5\x34\x1B\x6\x158\x165\f\x3\x2\x2"+
		"\x159\x166\a@\x2\x2\x15A\x166\aV\x2\x2\x15B\x166\aW\x2\x2\x15C\x166\a"+
		"X\x2\x2\x15D\x166\aY\x2\x2\x15E\x166\aZ\x2\x2\x15F\x166\a[\x2\x2\x160"+
		"\x166\a\\\x2\x2\x161\x166\a_\x2\x2\x162\x166\a`\x2\x2\x163\x166\a^\x2"+
		"\x2\x164\x166\a]\x2\x2\x165\x159\x3\x2\x2\x2\x165\x15A\x3\x2\x2\x2\x165"+
		"\x15B\x3\x2\x2\x2\x165\x15C\x3\x2\x2\x2\x165\x15D\x3\x2\x2\x2\x165\x15E"+
		"\x3\x2\x2\x2\x165\x15F\x3\x2\x2\x2\x165\x160\x3\x2\x2\x2\x165\x161\x3"+
		"\x2\x2\x2\x165\x162\x3\x2\x2\x2\x165\x163\x3\x2\x2\x2\x165\x164\x3\x2"+
		"\x2\x2\x166\x167\x3\x2\x2\x2\x167\x17F\x5\x34\x1B\x3\x168\x169\f\x4\x2"+
		"\x2\x169\x16A\a\x45\x2\x2\x16A\x16B\x5\x34\x1B\x2\x16B\x16C\a\x46\x2\x2"+
		"\x16C\x16D\x5\x34\x1B\x5\x16D\x17F\x3\x2\x2\x2\x16E\x16F\f\x15\x2\x2\x16F"+
		"\x170\a?\x2\x2\x170\x17F\t\b\x2\x2\x171\x172\f\x14\x2\x2\x172\x173\a;"+
		"\x2\x2\x173\x174\x5\x34\x1B\x2\x174\x175\a<\x2\x2\x175\x17F\x3\x2\x2\x2"+
		"\x176\x177\f\x13\x2\x2\x177\x179\a\x39\x2\x2\x178\x17A\x5 \x11\x2\x179"+
		"\x178\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17F"+
		"\a:\x2\x2\x17C\x17D\f\x11\x2\x2\x17D\x17F\t\t\x2\x2\x17E\x132\x3\x2\x2"+
		"\x2\x17E\x135\x3\x2\x2\x2\x17E\x138\x3\x2\x2\x2\x17E\x143\x3\x2\x2\x2"+
		"\x17E\x146\x3\x2\x2\x2\x17E\x149\x3\x2\x2\x2\x17E\x14C\x3\x2\x2\x2\x17E"+
		"\x14F\x3\x2\x2\x2\x17E\x152\x3\x2\x2\x2\x17E\x155\x3\x2\x2\x2\x17E\x158"+
		"\x3\x2\x2\x2\x17E\x168\x3\x2\x2\x2\x17E\x16E\x3\x2\x2\x2\x17E\x171\x3"+
		"\x2\x2\x2\x17E\x176\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17F\x182\x3\x2"+
		"\x2\x2\x180\x17E\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x35\x3\x2\x2\x2"+
		"\x182\x180\x3\x2\x2\x2\x183\x184\a\x39\x2\x2\x184\x185\x5\x34\x1B\x2\x185"+
		"\x186\a:\x2\x2\x186\x18A\x3\x2\x2\x2\x187\x18A\x5\x38\x1D\x2\x188\x18A"+
		"\a\x61\x2\x2\x189\x183\x3\x2\x2\x2\x189\x187\x3\x2\x2\x2\x189\x188\x3"+
		"\x2\x2\x2\x18A\x37\x3\x2\x2\x2\x18B\x18C\t\n\x2\x2\x18C\x39\x3\x2\x2\x2"+
		"\x18D\x192\x5<\x1F\x2\x18E\x18F\a;\x2\x2\x18F\x191\a<\x2\x2\x190\x18E"+
		"\x3\x2\x2\x2\x191\x194\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x192\x193\x3"+
		"\x2\x2\x2\x193;\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x195\x196\t\v\x2\x2"+
		"\x196=\x3\x2\x2\x2)?\x43HLQU\x61iox\x81\x89\xA1\xA7\xAE\xB3\xB8\xC2\xC7"+
		"\xCC\xD4\xD8\xDC\xE0\xE2\xE6\xF8\x101\x10A\x115\x11D\x130\x140\x165\x179"+
		"\x17E\x180\x189\x192";
	public static readonly ATN _ATN =
		ATNSimulator.Deserialize(_serializedATN.ToCharArray());
}
} // namespace LangC_Capstone.Grammars
